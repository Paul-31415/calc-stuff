


org        $9d95-2
db         $BB,$6D

start:
    ;voices: pulse,  saw, tri, sine, twang, noise
    ;vars?:  w,p,v   d,m  d,v  d,b   r,m    r,M 
    ;w = width, p = period, v = volume
    ;d = delta, m = modulus,b = bitshift (fast volume)
    ;r = rate , M = mask
	;
    ;probably can omit tri in favor of saw    
    call setup_sound_engine


	;
	
loop: ;need to write to rate, duty, a,b of pulses
	; to rate, shift of sine
	; to rate, modulus of twang (and to it's buffer)
	; to rate, masks of noise
	
	
	
	
	
	jp cleanup_sound_engine


pulse1: ; phase, rate, duty, a_rl, b_rl
dw 0,0,0, 0,0
pulse2:
dw 0,0,0, 0,0
sine: ; phase, rate, shift
dw 0,0,0x0101
twang: ; counter, rate, modulus 
db 0,0, 0,0
db 0
noise: ; prev, ctr,rate, masks
db 0,0, 0, 0, 0,0
	

update_samples:
	;pulse wave x 2
	; counter, delta, width, a_rl, b_rl
	ld hl,(pulse1)
	ld de,(pulse1+2)
	add hl,de
	ld (pulse1),hl
	ld de,(pulse1+4)
	sbc hl,de
	jr nc,$+2+3+2
	 ld hl,(pulse1+6)
     jr $+2+3
    ld hl,(pulse1+8)
	push hl

	ld hl,(pulse2)
	ld de,(pulse2+2)
	add hl,de
	ld (pulse2),hl
	ld de,(pulse2+4)
	sbc hl,de
	jr nc,$+2+3+2
	 ld hl,(pulse2+6)
     jr $+2+3
    ld hl,(pulse2+8)
	push hl

    
    ;saw wave? (would have to do x2 (one for left and one for right)
    ; counter, delta, modulus
	
    ;sine wave
    ; counter, delta, shift_lr
	ld hl,(sine)
    ld de,(sine+2)
    add	hl,de
    ld (sine),hl
	ld l,h
	ld h,sinetable>>8
	ld h,(hl)
	ld l,h
	ld bc,(sine+4)
sine_shift_loop1:
	 sra h
	djnz sine_shift_loop1
	ld b,c 
sine_shift_loop2:
	 sra l
	djnz sine_shift_loop2
	push hl
	;twang wave
	; counter, rate, modulus
	ld hl,(twang+2)
	ld a,l
	add h
	ld (twang+2),a
	ld hl,(twang)
	jr nc,twang_no_step
	  ld a,(twang+4)
	  ld h,l
	  inc l
	  cp l
	  jr nc,$+2+2
       ld l,0
      ex de,hl
      ld h,twangbuffer>>8
	  ld l,e
	  ld a,(hl)
	  ld l,d
	  add (hl)
	  srl a
      ld (hl),a
      ex de,hl
      ld (twang),hl
twang_no_step:
	ld h,twangbuffer>>8
	ld l,(hl)
	ld h,l
	push hl
    
    ;noise wave:
    ; prev, ctr,rate , mask
    ld hl,(noise+2)
    ld a,l
    add h
    ld (noise+2),a
	jr nc,noise_no_step
	 call rand16
     ld d,a
     ld hl,(noise+4)
     and h
     ld h,a
     ld a,d
     and l
     ld l,a
     ld (noise),hl
noise_no_step:
	ld hl,(noise)

	pop de ; twang
    add hl,de
	pop de ; sine
    add hl,de
    pop de ; pulse2
    add hl,de
    pop de ; pulse1
    add hl,de
    ld a,0b00111111
	and h
	ld (r_val+1),a
	ld a,0b00111111
	and l
	ld (l_val+1),a

    ret

fill_rand: ;fills de with b samples rand, hl seed
	
    ld a,h
    cpl
    dec a
    rrca
    add l
    ld l,a
    sub h
    xor 162
    ld h,a

	ld a,0b00111111
	and l
	ld (de),a
	inc de

	djnz fill_rand
	ret
rand16:
	push hl
rand16seed:
    ld hl,0
	ld a,h
    cpl
    dec a
    rrca
    add	l
    ld l,a
    inc	de
    sub	h
    xor 162
    ld h,a
	ld a,l
	ld (rand16seed+1),hl
	pop hl
	ret
;want these alligned
ds -($&0xff)
sinetable:
db 0x40,0x41,0x43,0x44,0x46,0x47,0x49,0x4a,0x4c,0x4d,0x4f,0x50,0x52,0x53,0x55,0x56,0x58,0x59,0x5b,0x5c,0x5d,0x5f,0x60,0x61,0x63,0x64,0x65,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6f,0x70,0x71,0x72,0x73,0x73,0x74,0x75,0x76,0x77,0x78,0x78,0x79,0x7a,0x7a,0x7b,0x7b,0x7c,0x7c,0x7d,0x7d,0x7d,0x7e,0x7e,0x7e,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7e,0x7e,0x7e,0x7d,0x7d,0x7d,0x7c,0x7c,0x7b,0x7b,0x7a,0x7a,0x79,0x78,0x78,0x77,0x76,0x75,0x74,0x73,0x73,0x72,0x71,0x70,0x6f,0x6d,0x6c,0x6b,0x6a,0x69,0x68,0x67,0x65,0x64,0x63,0x61,0x60,0x5f,0x5d,0x5c,0x5b,0x59,0x58,0x56,0x55,0x53,0x52,0x50,0x4f,0x4d,0x4c,0x4a,0x49,0x47,0x46,0x44,0x43,0x41,0x40,0x3e,0x3c,0x3b,0x39,0x38,0x36,0x35,0x33,0x32,0x30,0x2f,0x2d,0x2c,0x2a,0x29,0x27,0x26,0x24,0x23,0x22,0x20,0x1f,0x1e,0x1c,0x1b,0x1a,0x18,0x17,0x16,0x15,0x14,0x13,0x12,0x10,0xf,0xe,0xd,0xc,0xc,0xb,0xa,0x9,0x8,0x7,0x7,0x6,0x5,0x5,0x4,0x4,0x3,0x3,0x2,0x2,0x2,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x2,0x2,0x2,0x3,0x3,0x4,0x4,0x5,0x5,0x6,0x7,0x7,0x8,0x9,0xa,0xb,0xc,0xc,0xd,0xe,0xf,0x10,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x1a,0x1b,0x1c,0x1e,0x1f,0x20,0x22,0x23,0x24,0x26,0x27,0x29,0x2a,0x2c,0x2d,0x2f,0x30,0x32,0x33,0x35,0x36,0x38,0x39,0x3b,0x3c,0x3e
twangbuffer:
ds 256
setup_sound_engine:
    di
    exx
	ld hl,snd_frame
	exx
	;setup timer
	ld hl,$9900 ;vec table in appbackupscreen
    ld de,$9901
    ld (hl),$a0;interrupt address
	ld bc,256
	ldir
	ld a,$99
    ld i,a

	im 2

	ld a,1
	out ($20),a;fast mode
	ld a,$e0
	out (3),a;di from other sources


	ld a,$80 ;cpu/1
    out ($36),a
    ld a,2
    out ($37),a
    ld a,255
    out ($38),a
    
    ei 
	ret
	
cleanup_sound_engine:
	di
   
    ;turn off sample timer's interrupt
    xor a
    out ($37),a
	out (0),a
  
    ld a,$0b
    out (3),a ;restore normal interrupt mask
    
    im 1
    ret
pitchtable:
dw 0xf1a2,0xe412,0xd745,0xcb30,0xbfc9,0xb505,0xaadc,0xa145,0x9838,0x8fad,0x879c,0x8000

snd_frame:
db 0
snd_track:
db 0
;6 bit stereo
;#define depth 64
depth: macro 64 endm	
;#define offset 18
offset: macro 18 endm
ds 0xa0a0-$
int_stereo:;19 to get to interrupt
	ex af,af'
	jr nc,r_on
stereo_smc_jr_origin:
	;off
	exx
	ld b,a
	ld a,2
	out (37h),a
	xor a
	out (0),a
	ld a,depth+offset+offset
	sub b
	exx
	scf
	out (38h),a ;90+11
	ex af,af'
	ei
	ret ;18 = 119
r_on:
	ld a,l_on-stereo_smc_jr_origin
	ld (stereo_smc_jr_origin-1),a
	ld a,1
	out (0),a
	inc a
	out (37h),a
r_val:
	ld a,31 ;can't be too big
	add offset
	out (38h),a ;102+11
	ex af,af'
	ei
    ret ;18 = 131
l_on:
    ld a,r_on-stereo_smc_jr_origin
    ld (stereo_smc_jr_origin-1),a
    ld a,2
    out (0),a
    out (37h),a
l_val:
    ld a,31
	add offset
	exx
	inc (hl)
	exx
    out (38h),a ;117+11
    ex af,af'
	ei
    ret ;18 = 146
int_stereo_end:;in case you want to copy it somewhere else
;full cycle: (515+128) = 23.3 kHz
; = 19.9% performance, feels like 3 MHz

	
