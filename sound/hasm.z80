;hasm - 8 bit higher-level assembly


	
;example hasm prog at end of table
#include "ti83plus.inc"
#define     progStart   $9D95
.org        progStart-2
.db         $BB,$6D
	jp hasm_start



start_8:
	pop de
nop_8:
interp_loop_8:
	ld a,(de)
	inc de
    
	ld h,call_table_8>>9
	add a,a
    rl h
    ld l,a
 
    ld a,(hl)
    inc hl
    ld l,(hl)
    ld h,a
    jp (hl) ;64 t-states, oof, these better be good instructions
    		;also, damn, jp (hl) is fast!
 ;args: de is pc, hl,af are destroyed between opcodes
 ;return with pc in de

exit_8:
	ex de,hl
    jp (hl)

reg_width: ;must be ≥1
.db 4 

    
;complete extensibility
def_opcode_8:; defop imm8 imm16
			 ;         A   code
             ;overrites opcode A to jump to code as z80
    ld a,(de)
    inc de
    
    ld h,call_table_8>>9
	add a,a
    rl h
    ld l,a
    
    ex de,hl
    ldi
    ldi
	jp interp_loop_8
    
;#   #	 ###	#####	#	#
;## ##	#	#	  #		#	#
;# # #	#####	  #		#####
;#	 #	#	#	  #		#	#
;#	 #	#	#	  #		#	#
 

xor: 
	ld a,$ae ;xor
	ld (op_op),a
	jr op

or:
	ld a,$b6 ;or
	ld (op_op),a
	jr op
and:
	ld a,$a6 ;and
	ld (op_op),a
	jr op
sub:
	ld a,$9e ;sbc
	ld (op_op),a
	or a
	jr op
add:
	ld a,$8e ;adc
	ld (op_op),a
	or a
op:
	;(de...n) += (hl...n)
    ld a,(reg_width)
    ld b,a
op_loop:
    ld a,(de)
op_op:
    adc a,(hl)
    ld (de),a
    inc hl
    inc de
    djnz op_loop
    ret

cpl:
	ld a,$2f ;cpl
	ld (mop_op),a
	jr mop

sla:
	ld a,$17 ;rla
	ld (mop_op),a
	or a

mop:
	;(de...n) = op(de...n)
    ld a,(reg_width)
    ld b,a
mop_loop:
    ld a,(de)
mop_op:
    rla
    ld (de),a
    inc de
    djnz mop_loop
    ret


;aiming for $9e00, will put excess opcode defs after table
.echo $9e00-$
;must be 512 aligned, oof
call_table_8:
;00
.dw nop_8
#define h_nop .db $00
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;08
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;10
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;18
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;20
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;28
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;30
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;38
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;40
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;48
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;50
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;58
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;60
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;68
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;70
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;78
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;80
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;88
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;90
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;98
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;A0
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;A8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;B0
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;B8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;C0
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;C8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;D0
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;D8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;E0
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;E8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;F0
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
;F8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw nop_8
.dw exit_8
#define h_exit .db $ff


    

mul:
	;;(bc..n) = (hl..n)*(de..n) ;!! bc cant be same as de or hl
 	ld a,(reg_width)
    push bc
    ld ixh,a
	ld bc,0
    xor a
mul_outer_loop:
	 ;calc ixl
     ;num digits = (reg_width) - ixh + 1
     push af
     ld a,(reg_width)
     sub ixh
     inc a
     ld ixl,a
     pop af
     
     call mul_lvl
     ;adj ptrs
     inc hl
     ex de,hl
     
     ;output to dest
     ex (sp),hl
     ld (hl),c
     inc hl
     ex (sp),hl
     ;carry >>= 8
     ;ld abc,0ab
     ld c,b
     ld b,a
     xor a
     
     dec ixh
    jr nz,mul_outer_loop
    pop hl
	ret

;muls: abcd*efgh
;				
;	=		 d*h|
;	+	d*g+c*h|
;	+ bh+cg+df|
;	+		 |ah+bg+cf+de
;	 		[low ]
;	+		|ag+bf+ce
;	+	   |af+be
;	+	  |ae

mul_high:
	;;(bc..n) = (hl..n)*(de..n)
 	ld a,(reg_width)
    push bc
    ld ixh,a
	ld bc,0
    xor a
mul_high_carry_loop:
	 ;calc ixl
     ;num digits = (reg_width) - ixh + 1
     push af
     ld a,(reg_width)
     sub ixh
     inc a
     ld ixl,a
     pop af
     
     call mul_lvl
     ;adj ptrs
     inc hl
     ex de,hl
     
     ;carry >>= 8
     ;ld abc,0ab
     ld c,b
     ld b,a
     xor a
     
     dec ixh
    jr nz,mul_high_outer_loop
	;carry is bc
    ld a,(reg_width)
    dec a
    jr z,mul_high_skip_outer_loop
    ld ixh,a
    
    xor a
    ;adjust ptrs for second round
    inc hl
    inc de
    
mul_high_outer_loop:
	 ;calc ixl
     ;num digits = ixh
     ld ixl,ixh
     
     call mul_lvl
     ;adj ptrs
     dec de
     ex de,hl
     
     ;output to dest
     ex (sp),hl
     ld (hl),c
     inc hl
     ex (sp),hl
     ;carry >>= 8
     ;ld abc,0ab
     ld c,b
     ld b,a
     xor a
     
     dec ixh
    jr nz,mul_high_outer_loop
mul_high_skip_outer_loop:
    pop hl
    ;carry: bc
    ; I think b = 0 here by math
    ld (hl),c
	ret




;helper funcs



mul_lvl: ;abc - carry
		 ;hl: digit ptr: ai
         ;de:            bi
         ;ixl - number of digits to calc
   ;output: abc - result
   ;		hl - (ai-ixl)
   ;		de - (bi+ixl)  
	push de
    jr $+3
mul_lvl_loop:
	 pop hl
 	  ld d,(hl)
      dec hl
      ex (sp),hl
      ld e,(hl)
      inc hl
      ex (sp),hl
     push hl
     
     ;ld hlc,abc
     ld l,b
     ld h,a
     
     call fma
     ;ld abc,chl
     ld a,c
     ld b,h
     ld c,l

     dec ixl
    jr nz,mul_lvl_loop
    pop hl
    pop de
	ret


fma: ;hlc += d*e
	 ;output in chl
     ;has silent errors if answer can't fit
    ld a,d
    ld d,0
    ld b,8
fma_loop:
	rlc c
    adc hl,hl
    jr nc,$+3
      inc c
    rlca
    jr nc,$+2+1+3
      add hl,de
      jr nc,$+3
        inc c
	djnz fma_loop
    ret



int_firing:
.db 0
int_mask:
.db %11101011
filler_mem:
.dw 0,0,0,0

;#####	#	#	#####		/	 ###	#	#	####
;  #	##	#	  #		   /	#   	##  #	#	#
;  #	# #	#	  #		  /		 ### 	# # #	#	#
;  #	#  ##	  #		 /			#	#  ##	#	#
;#####	#	#	  #		/		####	#	#	####
;!!! can do stuff in logspace for envelope !!!
;     have lut for conversion



#define sample_delay 20

.echo $a0a0-$
sound_isr: ;takes 19 t-states to get here
	ex af,af'
    in a,(4)
    rlca ;check timer 3, the sample timer
    jr nc,sound_isr_not_timer_3
	
    
    ;sample is in c
    ;timer 3 is firing, play sample c and compute next c
    	;enter overhead: 30+19
        ;total overhead: 66+19=85
    
	;ok, experiments sugguest that the wires are not driven equally
    ;but I'll have to do some breadboard stuff to make sure

	;unfortunately this means min driving time is 11 tstates
    ; however, 0 will be at 50% driving so meh,
    ; audio quality only suffers near the clipping ranges
    ;interrupts occur at the end of opcodes,
    ; so if I do a pwm based thing at like 50khz,
    ; I will get variable t-state resolution depending on what
    ; instruciton is executing when the int triggers
    ;   (might be worth it for the cpu load difference)
    ;  benifits: constant cpu cost
    ;  drawbacks: 2x interrupt overhead (≥170/300), 
    ;				-timer has to be twice as fast as sample-rate
    ;				-have to write to timer repetedly instead of letting it coast
    ;  				-other audio commands could interfere
    ;				-must use cpu clock so sample rate is tied to cpu speed
    ;				-each int is a half sample, making sample calculating math run 2x
    ;				-have to store an extra bit
    ;	REFINED: combined with 1 t-state resolution for range of 23 
    ;			read from timer port to get error and correct
    ;			routine must be less than 256 t-states total
    ;	
    ;other approach: interrupt takes less time minimum, 
    ;				 but up to 50% + lots of overhead for the precision timings
    ;
    ;some precalculations: 170 t-state overhead in 600 t-state loop (fast mode) gives us a max of 215 t-states to work with (base:-57%)
    ;			(slow: 35) (base:-71%)
    ;		other method:   85 t-state overhead gets us 515 t-states
    ;						(base:-14%)
    ;						(slow: 155) (base:-35%)
    ; other method has advantage in that you don't have to 
    ;  align timing globally   EDIT: yes you do, you really do
    
    ;global alignment uses timer 2
;    exx
    in a,($35)
    rra
    jr nc,$+2+1
     ;ret nc
     nop
    
;    ld c,a
;    ;output byte for scope debugging
;    ld b,8
;byte_output:
;    xor a
;    out (0),a
;    inc a
;    out (0),a
;    dec a
;    out (0),a
;    rlc c
;    rra
;    rlca
;    rla
;    out (0),a
;    djnz byte_output
;    exx
    ;ld b,3
    ;xor a
    ;out (0),a
    ;ld a,b
    ;out (0),a
    ;xor a
    ;out (0),a
    ;ld a,b
    ;out (0),a
    ;xor a
    ;out (0),a
    ;ld a,c
    ;exx
    
    
    ;delay((~a)%32) {
;    rra
;    jr nc,$+2+1 ;12/11
;     nop
;    rra
;    jr c,$+2+2 ;12/14
;     jr c,$+2
;    rra
;    jp c,$+3+1;10/14
;     nop
;    rra
;    jp c,$+3+2;10/18
;     nop
;     nop
;    or $f8;$fe ; % 32
;    inc a
;    jr nz,$-1 ;16k+11
    ;} total:73+k   
;    in a,($35)
   	;scope debugging
;    out (1),a
    
    
    ;global alignment delay: 84+align (max: 115)
    
    ;ld a,3
    ;out ($37),a
    ;out (0),a
    ;xor a
    ;out (0),a
    ;ex af,af'
    ;ei
    ;ret
    
    ;ack sample timer
    ld a,3
    out ($37),a
    ;and start sample
    out (0),a
sample:
	ld a,$00
    
    xor a
    
    ;and $0f
    ;delay(a) {
    rra
    jr c,$+2+1 ;12/11
     nop
    rra
    jr nc,$+2+2 ;12/14
     jr nc,$+2
    rra
    jp nc,$+3+1;10/14
     nop
    rra
    jp nc,$+3+2;10/18
     nop
     nop
    and $0f
    inc a
    dec a
    jr nz,$-1 ;16a+15
    ;} total:77+a
    out (0),a ; a is 0 rn
    
    
    
    ex af,af'
    ei
    ret ;total time: 187 + sample + 84 + alignment (max overall : 557, min: 271)
    	;note that p.04 must be read before sample timer triggers again
        ; which adds an extra 34 tstates of room needed
    	;
        ; thus sample time must be over 591
        ; given a sample time of 20*32, there are a min of 83 t-states free
        ; thus a min effective speed of 1.95 Mhz (max: 8.65 Mhz)
        
    
sound_isr_not_timer_3:
    cp $40 ; check top 2 bits nondestructively
    jr c,sound_isr_not_ctimer
    ;sound isr
    exx ; get shadow regs
    
    rra
    jr sound_isr_not_timer_2
    ld b,a
    ld a,(sample+1)
    sub (hl)
    inc hl
    add a,(hl)
    ;ld (sample+1),a
   ;out ($11),a
    ld a,3
    out ($34),a
    ld a,b
sound_isr_not_timer_2:
	rra
    
    jr nc,sound_isr_not_timer_1
    ex de,hl
    ld a,(sample+1)
    sub (hl)
    inc hl
    add a,(hl)
    ;ld (sample+1),a
   ;out ($11),a
    ld a,3
    out ($31),a
    ex de,hl
sound_isr_not_timer_1:
    
    exx
    ex af,af'
    ei
    ret
    
sound_isr_not_ctimer:
	;dispatch interrupts and ack all
    rrca
    ld (int_firing),a
    xor a
    out (3),a
    ld a,(int_mask)
    out (3),a
    ex af,af'
    ret
    
setup_sound_engine:
	;setup isr and sample timer
    di
    ;xor a
    ;out ($2e),a
    
    ld hl,$9900 ;vec table in appbackupscreen
    ld de,$9901
    ld (hl),$a0
	ld bc,256
	ldir
    
    ld a,$99
    ld i,a
    
    im 2
    
    ;set fast mode
    ld a,1
    out ($20),a
    
    ;disable interrupts from other sources
    ld a,$e1
    out (3),a
    
    ld d,%00010110 ;experimentally determined constant
    ;setup sample timer at 23.4khz
    ld a,$90 ;/64
    out ($36),a
    ld a,3
    out ($37),a
    ld a,sample_delay ;2.5*256 = 20*32
    out ($38),a
    
    ;setup alignment timer
    ld a,$80 
    out ($33),a
    ld a,1 ; loop (and roll over)
    out ($34),a
    ld a,d
    out ($35),a	
    ei
    ret	
    
cleanup_sound_engine:
	di
    
   
    ;turn off all timers' interrupts
    xor a
    out ($31),a
	out ($34),a
    out ($37),a
    
    ld a,$0b
    out (3),a
    
    im 1
    ret
    
    



sound_mult: ;8 bit fast approx multiply routine for sample volume scaling
	;uses a,c
    ;output in a
 


    ;

;####	#	#	 ###
;#	 #	##	#	#
;####	# # #	#  ##
;#  #	#  ##	#	#
;# 	 #	#	#	 ###	& checksum & crypto
isr:
intr:
.dw 0,0,0,0,0


rand_isr:
	ex af,af'
    exx
rand_isr_entorpy_ctr:
    ld bc,intr
	ld a,r
    ld (bc),a ;core: 16
    ld a,c
    dec a
    or 8
    ld (isr+rand_isr_entorpy_ctr+1-rand_isr),a
	exx
    ex af,af'
    ei
    ret




;prng
fast_prng:;for audio purposes
			;flaws: has some not-quite-white-noise spots
            ;		slow for audio
		;inputs: (hl) - state
	ld a,(hl)
    cpl
    dec a
    rrca
    inc hl
    sub (hl)
    ld (hl),a
    dec hl
    cp $8f
    adc a,(hl)
    xor $21
    ld (hl),a
	ret ;t-states:83


crc8:;a is crc, c is input byte
	ld b,8
crc8_loop:
	 add a,a;sla
     jr nc,$+4
crc8_poly:
      xor %00000111
	djnz crc8_loop
    xor c
    ret
    
crc16: ;hl is crc, c is input byte
	ld b,8
crc16_loop:
	add hl,hl
    jr nc,$+2+8
crc16_poly_h:
	 ld a,$80
     xor h
     ld h,a
crc16_poly_l:
	 ld a,$01
     xor l
     ld l,a
	djnz crc16_loop
    ld a,c
    xor l
    ld l,a
    ret


    
; ####  						#
;#    #							#		#	
;#   	# ###	 ####	# ###	# ###		###	   ###
;#  ###	##   #		 #	##	 #	##	 #	#  #   #  #
;#	  #	#    	 #####	#    #	#	 #	#  #	   ###
;#	  #	#		#	 #	#####	#	 #	#  #   #	  #
; ####	#		 #####	#		#	 #	#	###	   ###
;						#

gbuf_width:
.db 12 ;bytes
gbuf_size:;bytes
.dw 12*64
zindex:
.db 0








; ###	####	####	#####	#####	#####
;#		#   #	#   #	  #		  #		#
; ##	### 	####	  #		  #		###
;	#	#    	#  # 	  #		  #		#
;###	#    	#	#	#####	  #		#####


;!!! rrd/rld (18) is slower than 4 rras (4 each)
;	most of the time cost comes from the 2 mem accesses


;notation: (rr...n) is n bytes starting at address rr
;scaling stuff
;bit-vectored add
bva:;bit vector adds a to (hl...8)
	;
	ld b,8
bva_loop:
	rrca
	jr nc,$+3
    inc (hl)
    inc hl
    djnz bva_loop
	ret

;vector to bit threshold
vbt:;converts (hl...8) to c with a as threshold (pixel set if (hl) > a)
	ld b,8
vbt_loop:
	cp (hl)
    rl c
    inc hl
    djnz vbt_loop
    ret
    
bit_reverse: ; bit reverses a
	;http://www.retroprogramming.com/2014/01/fast-z80-bit-reversal.html
  ld l,a    ; a = 76543210
  rlca
  rlca      ; a = 54321076
  xor l
  and $AA
  xor l     ; a = 56341270
  ld l,a
  rlca
  rlca
  rlca      ; a = 41270563
  rrc l     ; l = 05634127
  xor l
  and $66
  xor l     ; a = 01234567
    ret
    
vec_reverse: ;byte-swapping-reverses (hl...8) with (ix...8)
			;eg (hl):ABCDEFGH
            ;   (ix):IJKLMNOP
            ;	to
            ;   (hl):PONMLKJI
            ;   (ix):HGFEDCBA
            ;if ix == hl, to get proper reversing,
            ;     set b to 4 and call vec_reverse_loop
  ld b,8
vec_reverse_loop:
	ld c,(hl)
    ld a,(ix+7)
    ld (hl),a
    ld (ix+7),c
    inc hl
    dec ix
    djnz vec_reverse_loop
  ret
    
    
;#	 #	#####	 ###	#####	 ###	####	
;#	 #	#		#		  #		#	#	#	#	
; #	#	###		#		  #		#	#	####	
; # #	#		#		  #		#	#	#  #	
;  #	#####	 ###	  #		 ###	#	#	

;gbuf_width
;gbuf_size
;zindex

pixel:
	








    
    
; ###	####	
;#	 #	#	#	
;  ##	#	#	
;#	 #	#	#	
; ###	####	

    
    
    

    









