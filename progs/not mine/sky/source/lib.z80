.nolist

#define equ .equ
#define EQU .equ

#define _clrgbuf 4BD0h
#define _getCSC 4018h
#define gbuf 9340h
#define B_CALL(xxxx) rst 28h \ .dw xxxx
#define bcall(xxxx)     rst 28h \ .dw xxxx
#define clrgbuf() B_CALL(_clrgbuf)
#define largesprite(largesprite_down,largesprite_right,largesprite_size_down,largesprite_size_right,largesprite_address) ld a,largesprite_down \ ld l,a \ ld a,largesprite_right \ ld b,largesprite_size_down \ ld c,largesprite_size_right \ ld ix,largesprite_address \ call _largesprite
#define display() call fastcopy
#define getkey() B_CALL(_getCSC)

#define size() .echo "# Program size = ", $-start, " bytes."

#define .nostub	#define nostub \ .echo ""
#define .mirageos	#define mirageos
#define .ion	#define ion
#define .ti83p	#define TI83P

#macro .asmprgm
	#ifndef prgmname
		.echo "Warning: No program name set (#define prgmname \"DEFAULT\")"
		#define prgmname "DEFAULT"
	#endif
	#ifdef TI83P
		#define calcmodel "TI83+/84+"
	#else
		#define calcmodel "TI83"
	#endif
	#ifdef mirageos
		.org 9D95h -2
		.db $BB,$6D
		ret
		.db 1
		#include icon.z80
		.db prgmname, 0
	#else
		#ifdef ion
			#ifdef TI83P
				.org	9D95h -2
				.db	$BB,$6D
			#else
				.org	9d95h
			#endif
			ret
			jr	nc, start
			.db	prgmname, 0
		#else
			#define nostub
			#ifdef TI83P
				.org	9D95h -2
				.db	$BB,$6D
			#else
				.org	9d95h
			#endif
		#endif
	#endif
	.echo	"# Compiling \"", prgmname, "\" for ", calcmodel, "..."
start
#ifdef nostub
	bcall(_runIndicOff)
#endif
#endmacro

#macro .quit
	#ifdef nostub
		clrgbuf()
		call	fastcopy
		res	onInterrupt,(iy+onFlags)
		res	donePrgm,(iy+doneFlags)
	#endif
	ret
#endmacro


;============================================
;     > macros
;============================================

#define clr() .echo > temp.asm "\n"
#define run() #include temp.asm
#define var(var.value,var.string) .echo >> temp.asm "#define ",var.string," ",var.counter,"\n" \ addz(var.value)
#define addz(add.value) #define var.counter eval(var.counter + add.value) \ #define var.size eval(add.value)
#define varloc(varloc.value) #define var.counter eval(varloc.value) \ #define var.size 0
#define varfree(varfree.string) .echo >> temp.asm "#define ",varfree.string," ",var.counter,"\n"

#define textinverse.on set textInverse, (iy+textflags)
#define textinverse.off res textInverse, (iy+textflags)
#define textonbuf.on set textWrite,(iy+sGrFlags)
#define textonbuf.off res textWrite,(iy+sGrFlags)
#define bigfont.on set fracDrawLFont, (IY + fontFlags)
#define bigfont.off res fracDrawLFont, (IY + fontFlags)
#define bigfont.check bit fracDrawLFont, (IY + fontFlags)

#define save.xy(save.x,save.y) push de \ ld de,256*save.y +save.x \ ld (x),de \ pop de
#define load.xy() ld de,(x) \ ld l,d \ ld a,e

#define pen(pen.down,pen.right) ld de,256*pen.down + pen.right \ ld (pencol),de

#define copy(copy_source, copy_destination, copy_size) ld hl,copy_source \ ld de,copy_destination \ ld bc,copy_size \ ldir

#macro line(line_down, color)
	#if color = 1
		#define color $FF
	#endif
	ld	hl, gbuf +(line_down*12)
	ld	(hl), color
	ld	de, gbuf +(line_down*12) +1
	ld	bc, 12 -1
	ldir
#endmacro


;============================================
;     > plotsscreen and set_op
;============================================

#define	gbuf	9340h

plotSScreen	=9340h ;=gbuf
progstart	=9D95h



_CpHLDE		=400Ch
_setxxop1	=4A74h
_SetXXXXOP2	=4792h
_OP2ToOP1	=4156h
_DispOP1A	=4BF7h

;ld	de,PenCol/Row
;ld	hl,(~highscore~)
;B_CALL(_SetXXXXOP2)
;B_CALL(_OP2ToOP1)
;ld	a,MaxLengh
;B_CALL(_DispOP1A)

;============================================
;     > andere lekker sachen
;============================================
_ChkFindSym		EQU 42F1h
_CreateProg		EQU 4339h
_CreateProtProg	EQU 4E6Dh
_CreateAppVar	EQU 4E6Ah
_Arc_Unarc		EQU 4FD8h

_ZeroOP1	EQU 41C5h
_DelVar		EQU 4351h

ProgObj         EQU			5
AppVarObj		EQU	  		15h		;application variable
_JForceCmdNoChar	EQU 4027h

;tStop           =D9h

;============================================
;     > saferams
;============================================
;Ion sagt:
saferam1	=9872h
saferam2	=858fh
saferam3	=8508h
saferam4	=8478h
saferamp2	=8251h

;SRAM 		=86ECh
SRAM		=saferam1

;saferam1	=8265h
;saferam2	=858Fh
;saferam3	=80C9h
;saferam4	=8039h

;============================================
;     > B_calls
;============================================

_ClrScrnFull	=4540h
_ClrBuf3		=4BD0h	;right
_Clrgbuf		=_ClrBuf3
_ClrBuf			=_ClrBuf3

_DivHLBy10	EQU 400Fh
OP1             EQU  8478h

_homeup		=4558h
_GetCSC		=4018h
_getkey		= 4972h 
_Memcheck	=42E5h
_DispHL		=$4507
_puts		=450Ah
_Putc		=4504h


_VPutS		= 4561h
;VPutMap	EQU 455Eh ;Page 2
#define	VPutMap	455Eh
_newline	=452Eh
_RunIndicOff	=4570h
_RunIndicOn	=456Dh
_IPoint		=47E3h
_ILine		=47E0h
_grbufcpy_v	=5164h

;============================================
;     > Flags
;============================================

;set textinverse,(iy+textflags)
;res onInterrupt,(iy+onFlags)
;res donePrgm,(iy+doneFlags)


textInverse		EQU	3
textFlags		EQU	5

appAutoScroll	EQU	2
appFlags		EQU	13

onInterrupt		EQU	4
onFlags 		EQU	9

donePrgm		EQU	5
doneFlags		EQU	0

apiFlg4		EQU	43
fullScrnDraw	EQU	2

sGrFlags		EQU	20
textWrite		EQU	7	; 1 = Small font writes to buffer

;============================================
;     > Cur/Pen Col/Row
;============================================

curRow          EQU	844Bh
curCol          EQU	844Ch
penCol          EQU	86D7h
penRow          EQU	86D8h

;============================================
;     > _getCSC keys
;============================================

skDown          EQU	01h
skLeft          EQU	02h
skRight         EQU	03h
skUp            EQU	04h
skEnter         EQU	09h
skAdd           EQU	0Ah
skSub           EQU	0Bh
skMul           EQU	0Ch
skDiv           EQU	0Dh
skPower         EQU	0Eh
skClear         EQU	0Fh
skChs           EQU	11h
sk3             EQU	12h
sk6             EQU	13h
sk9             EQU	14h
skRParen        EQU	15h
skTan           EQU	16h
skVars          EQU	17h
skDecPnt        EQU	19h
sk2             EQU	1Ah
sk5             EQU	1Bh
sk8             EQU	1Ch
skLParen        EQU	1Dh
skCos           EQU	1Eh
skPrgm          EQU	1Fh
skStat          EQU	20h
sk0             EQU	21h
sk1             EQU	22h
sk4             EQU	23h
sk7             EQU	24h
skComma         EQU	25h
skSin           EQU	26h
skMatrix        EQU	27h
skGraphvar      EQU	28h
skStore         EQU	2Ah
skLn            EQU	2Bh
skLog           EQU	2Ch
skSquare        EQU	2Dh
skRecip         EQU	2Eh
skMath          EQU	2Fh
skAlpha         EQU	30h
skGraph         EQU	31h
skTrace         EQU	32h
skZoom          EQU	33h
skWindow        EQU	34h
skYEqu          EQU	35h
sk2nd           EQU	36h
skMode          EQU	37h
skDel           EQU	38h

;============================================
;     > direct input keys
;============================================

;	ld	a,0ffh
;	out	(1),a
;	ld	a,Group1
;	out	(1),a
;	in	a,(1)
;	cp	kDown
;	jp	z,Movedown
;	cp	kUp
;	jp	z,MoveUp
;		[...]

;<RegExpr      attribute="Number" context="#stay" insensitive="TRUE"  String="( (^|[ \t,]+) ( (\$|0x){1}[0-9]+[a-f0-9]*|[a-f0-9]+h ) ([ \t,]+|$) )"/>

;0ffh - resets the keyboard
Group1		=0feh ;11111110
Group2		=0fdh ;11111101
Group3		=0fbh ;11111011
Group4		=0f7h ;11110111
Group5		=0efh ;11101111
Group6		=0dfh ;11011111
Group7		=0bfh ;10111111

#ifdef DirectInputKeys
;Group 1
KDown		.equ 254
KLeft		.equ 253
KRight	.equ 251
KUp		.equ 247

;Group 2
KEnter	.equ 254
KPlus		.equ 253
KMinus	.equ 251
KMul		.equ 247
KDiv		.equ 239
KPower	.equ 223
KClear	.equ 191

;Group 3
kMinus2	.equ 254
kThree	.equ 253
kSix		.equ 251
kNine		.equ 247
kRbracket	.equ 239
kTan		.equ 223
kVars		.equ 191

;Group 4
KPoint	.equ 254
KTwo		.equ 253
KFive		.equ 251
KEight	.equ 247
KLbracket	.equ 239
KCos		.equ 223
KPrgm		.equ 191
KStat		.equ 127

;Group 5
KZero		.equ 254
KOne		.equ 253
KFour		.equ 251
KSeven	.equ 247
KComma	.equ 239
KSin		.equ 223
KMatrx	.equ 191
KX		.equ 127

;Group 6
KSto		.equ 253
KLn		.equ 251
KLog		.equ 247
kX2		.equ 239
kX-1		.equ 223
kMath		.equ 191
kAlpha	.equ 127

;Group 7
KGraph	.equ 254
KTrace	.equ 253
KZoom		.equ 251
KWindow	.equ 247
KY		.equ 239
k2nd		.equ 223
kMode		.equ 191
kDel		.equ 127
#endif

;=======================================================================


; #########################################
; ## "All the Keys v1.0" by John Wyrwas  ##
; ##       20002016 - 20002019           ##
; #########################################
;
; Includes the Getkey keys values, Getcsc (getk), and Direct Input
; key values.  They start with Gk, G, and K respectively and most contain
; the writing on the key.
;
; To use, unzip in your tasm directory and use #include keyval.inc
;
;
; #################
; ## Getkey Keys ##
; #################
; (the TI-OS does NOT recognize values from lowercase letter input- all are 0FC)
;
;Numbers
Gk0		.equ $8E
Gk1		.equ $8F
Gk2		.equ $90
Gk3		.equ $91
Gk4		.equ $92
Gk5		.equ $93
Gk6		.equ $94
Gk7		.equ $95
Gk8		.equ $96
Gk9		.equ $97
; Uppercase Letters
GkA		.equ $9A
GkB		.equ $9B
GkC		.equ $9C
GkD		.equ $9D
GkE		.equ $9E
GkF		.equ $9F
GkG		.equ $A0
GkH		.equ $A1
GkI		.equ $A2
GkJ		.equ $A3
GkK		.equ $A4
GkL		.equ $A5
GkM		.equ $A6
GkN		.equ $A7
GkO		.equ $A8
GkP		.equ $A9
GkQ		.equ $AA
GkR		.equ $AB
GkS		.equ $AC
GkT		.equ $AD
GkU		.equ $AE
GkV		.equ $AF
GkW		.equ $B0
GkX		.equ $B1
GkY		.equ $B2
GkZ		.equ $B3
; Other Keys
GkMode		.equ $45
GkIns		.equ $0B
GkDel		.equ $0A
GkRight		.equ $01
GkLeft		.equ $02
GkUp		.equ $03
GkDown		.equ $04
GkXTN		.equ $B4
GkLink		.equ $41
GkStat		.equ $31
GkList		.equ $3A
GkMath		.equ $32
GkTest		.equ $33
GkApps		.equ $2C
GkAngle		.equ $39
GkPrgm		.equ $2D
GkDraw		.equ $2F
GkVars		.equ $35
GkDistr		.equ $38
GkClear		.equ $09
GkX1		.equ $B6
GkMatrix	.equ $37
GkSin		.equ $B7
GkSin1		.equ $B8
GkCos		.equ $B9
GkCos1		.equ $BA
GkTan		.equ $BB
GkTan1		.equ $BC
GkPower		.equ $84
GkPi		.equ $B5
GkX2		.equ $BD
GkRoot		.equ $BE
GkComma		.equ $8B
GkEE		.equ $98

GkRightPar	.equ 86h
GkLeftPar	.equ 85h

GkDivide	.equ 83h
GkMultiply	.equ 82h
GkSubtract	.equ 81h
GkAdd		.equ 80h
GkEnter		.equ 05h

GkLittleE	.equ $EF
GkLeftBracket	.equ 87h
GkRightBracket	.equ 88h
GkMem		.equ 36h
GkEntry		.equ 0Dh
GkQuotes	.equ $CB
GkSolve		.equ 05h


GkLog		.equ $C1
GkLn		.equ $BF
GkSto		.equ $8A
Gk10X		.equ $C2
GkeX		.equ $C0
GkRcl		.equ $0C

GkLittleU 	.equ $F9
GkLittleV	.equ $FA
GkLittleW	.equ $FB
GkLittleI	.equ $EE

GkL1		.equ $F3
GkL2		.equ $F4
GkL3		.equ $F5
GkL4		.equ $F6
GkL5		.equ $F7
GkL6		.equ $F8

GkCatalog	.equ 3Eh
GkAns		.equ $C5
GkSpace		.equ 99h
GkColon		.equ $C6
GkQuestion	.equ $CA
GkPeriod	.equ 8Dh
GkNegative	.equ 8Ch

GkF1		.equ 49h
GkF2 		.equ 48h
GkF3		.equ 2Eh
GkF4		.equ 5Ah
GkF5		.equ 44h

GkStatPlot	.equ 30h
GkTblset	.equ 4Bh
GkFormat	.equ 57h
GkCalc		.equ 3Bh
GkTable		.equ 4Ah


;############################
;##     Getcsc/Getk Keys   ##
;############################

GF1		.equ 35h
GF2		.equ 34h
GF3		.equ 33h
GF4		.equ 32h
GF5		.equ 31h

G2nd		.equ 36h
GMode		.equ 37h
GDel		.equ 38h

GDown		.equ 01h
GLeft		.equ 02h
GRight		.equ 03h
GUp		.equ 04h

GAlpha		.equ 30h
GXTN		.equ 28h
GStat		.equ 20h
GMath		.equ 2Fh
GApps		.equ 27h
GPrgm		.equ 1Fh
GVars		.equ 17h
GClear		.equ 0Fh
GX1		.equ 2Eh
GSin		.equ 26h
GCos		.equ 1Eh
GTan		.equ 16h
GPower		.equ 0Eh
GX2		.equ 2Dh
GComma 		.equ 25h
GLeftPara	.equ 1Dh
GRightPara	.equ 15h

GDivide		.equ 0Dh
GMultiply	.equ 0Ch
GSubtract	.equ 0Bh
GAdd		.equ 0Ah
GEnter		.equ 09h
GLog		.equ 2Ch
GLn		.equ 2Bh
GSto		.equ 2Ah

G0		.equ 21h
G1		.equ 22h
G2		.equ 1Ah
G3		.equ 12h
G4		.equ 23h
G5		.equ 1Bh
G6		.equ 13h
G7		.equ 24h
G8		.equ 1Ch
G9		.equ 14h

GPeriod 	.equ 8Dh
GNegative	.equ 8Ch

;#######################
;## Direct Input Keys ##
;#######################

;Group 1
KeyRow_Pad	.equ $fe
KDown		.equ 254
KLeft		.equ 253
KRight		.equ 251
KUp		.equ 247

;Group 2
KeyRow_5 	.equ $fd
KEnter		.equ 254
KPlus		.equ 253
KMinus		.equ 251
KMul		.equ 247
KDiv		.equ 239
KPower		.equ 223
KClear		.equ 191

;Group 3
KeyRow_4 	.equ $fb
KMinus2		.equ 254
KThree		.equ 253
KSix		.equ 251
KNine		.equ 247
KRbracket	.equ 239
KTan		.equ 223
KVars		.equ 191

;Group 4
KeyRow_3	.equ $f7
KPoint		.equ 254
KTwo		.equ 253
KFive		.equ 251
KEight		.equ 247
KLbracket	.equ 239
KCos		.equ 223
KPrgm		.equ 191
KStat		.equ 127

;Group 5
KeyRow_2 	.equ $ef
KZero		.equ 254
KOne		.equ 24453
KFour		.equ 251
KSeven		.equ 247
KComma		.equ 239
KSin		.equ 223
KMatrx		.equ 191
KX		.equ 127

;Group 6
KeyRow_1 	.equ $df
KSto		.equ 253
KLn		.equ 251
KLog		.equ 247
kX2		.equ 239
;kX-1		.equ 223
kMath		.equ 191
kAlpha		.equ 127

;Group 7
KeyRow_Top 	.equ $bf
KGraph		.equ 254
KTrace		.equ 253
KZoom		.equ 251
KWindow		.equ 247
KY		.equ 239
k2nd		.equ 223
kMode		.equ 191
kDel		.equ 127

.list
