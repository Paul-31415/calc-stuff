#include    "ti83plus.inc"

#include	"ParserTypes.z80"

#define     progStart   $9D95
#define 	saveSScreen 86ECh
#define		basic_pc	965Dh
#define		basic_end	965Fh

.org        progStart-2
.db         $BB,$6D
	


	;warning: the hardware stack can only grow to $fe66, not $c000
    ;solution: move it somewhere else
	
    
	ld (spSave),sp
    
    call varPrep
    
    
    ;math and prog ctrl can share the same stack bc math ends before prog ctrl is needed
    ;math stack is ptrs to vars
    ;prog stack is ptrs to causative symbols or, if sign bit reset, is operation id or other instruction
    ld hl,$ffff ; 0xffff is ret instr
    push hl
   
    
   ;for defining asm functions:
   ; asm(hex) 
   ;hex can contain "[----]" in which case it calculates the absolute address to put in place of ---- (which is relative)
   
   
main:

    ld hl,(basic_pc)	;16			sum:45
    inc hl				;6
    ld a,(hl)			;7
    
;parser part, 2byte things are handled in the routines in the table
parse:
	 
     ex de,hl ;put basic_pc in de
     ld l,a
     ld h,0
     add hl,hl	;times 2
     ld bc,TokVecTable
     add hl,bc
     ld c,(hl)
     inc hl
     ld h,(hl)
     ld l,c
     jp (hl)   ;lies, this jumps to hl, not (hl)
     
     ;passes a as byte processed, de as basic_pc
     
     
ParseEndStoPc:
Pass:  
	ld (basic_pc),de
ParseEnd:


    ld hl,(basic_pc)
    ld de,(basic_end)
	or a 				;no sub hl,de ._.
    sbc hl,de			;is parser pc outside of prog?	
    jr nc,exit	;hl >= de 	C flag is reset
    
    in a,(4)
    bit 3,a
    jr nz,main
     
    ld a,(ParserFlags)
    and 1
    jr z,noExit
break:
      ld sp,(spSave)
      ld a,128+6
      bjump(_JError)
     
exit:
	  ld sp,(spSave)
      ret
noExit:
	;emergency exit? (2nd quit off)
    ld a,$ff
	out (1),a
	ld a,%10111111
	out (1),a
	in a,(1)
    cp $10011111
    jr nz,main
    jr break
    


    



ParserFlags:
.db %00000001
;bit 0: Off key enabled?
;bit 1: 
;bit 2: 
;bit 3: 
;bit 4: 
;bit 5: 
;bit 6: 
;bit 7: 


spSave:
.db 0,0


Ans:
.db 0,0
AnsType:
.db 0

CmdsOnStack: ;commands should always be below ops; they get executed by newlines only
.db 0

OpsOnStack: ;top most layer
.db 0
Parens: ;between ops and cmds (parens can be above and below ops but opsOnStack must be pushed with an open paren)
.db 0





lenBytes: ;hl is object, a is type, hl is pointer if object is big, returns c if it's a pointer, returns length in bc
	;preserves hl
    bit 4,a
    jr nz,_lenBytes_big
	 ;it's small, so only if a is byte or boolean or char is len 1
     cp t_char
     jr nz,_lenBytes_not_char
      ;length 1
      ld bc,1
      or a
      ret
_lenBytes_not_char:  
     sub t_boolean
     cp t_byte-t_boolean+1
     ;c is if it's one
     ccf
     ld a,0
	 ld b,a
	 rla
     inc a
     ld c,a
     or a ;zcf
     ret
_lenBytes_big:
	;ok, each type is a bit different
    ld b,a ;save a
    or 1 ;bigint and negbigint are same now
    cp t_Negative_Bigint 
    jr nz,_lenBytes_not_bigint
     ld c,(hl)
     ld b,0
     inc bc ;bytes term doesn't include itself
     scf
     ret
_lenBytes_not_bigint:   
     
     
     
     
 		;Todo
     jp NotImplementedError
    
    
    
    scf
    ret 



	
NotImplementedError:
	  ;ld sp,(spSave) unneeded
      ld a,E_Version+128	
	  bjump(_JError)


;pushAns pushes answer to the stack in the form [type][data...]
pushAns:
	ld (_pushAns_saveAhldebc),a
    ld (_pushAns_saveAhldebc+1),hl
    ld (_pushAns_saveAhldebc+3),de
    ld (_pushAns_saveAhldebc+5),bc
    pop hl
    ld (_pushAns_return_addr+1),hl
	 
     ld hl,(Ans)
     ld a,(AnsType)
     call lenBytes
     ld a,(AnsType)
     jr c,_pushAns_ptr
      ;c is 1 or 2
      push hl ;stack is [l][h]...
      dec c
      jr nz,_pushAns_small_2byte
       ;one byte, dealloc l
       inc sp 
_pushAns_small_2byte:
      ;now we push type
      push af
      inc sp ;dealloc f
	  ;done!
_pushAns_return:
    ld a,(_pushAns_saveAhldebc)
    ld hl,(_pushAns_saveAhldebc+1)
    ld de,(_pushAns_saveAhldebc+3)
    ld bc,(_pushAns_saveAhldebc+5)
_pushAns_return_addr:
	jp exit
_pushAns_ptr: ;ans can never contain nonpointer nonprimitives, it's not big enough

	;alloc bc+1 bytes on stack (+1 for type byte)
    ;so we sub bc+1 from sp
    ex de,hl ;save pointer in de
    ld h,b
    ld l,c
    scf
    sbc hl,sp
    ld sp,hl
    ;now we load the data
    ;hl is sp
    inc hl
    ld (hl),a ;save type
    inc hl
    ex de,hl
    ldir
    ;done!
    jp _pushAns_return
    
    
    

_pushAns_saveAhldebc:
.db 0,0,0,0,0,0,0


pushOp: ;pushes operation to stack and incs opsOnStack ;destroys hl,a
	ex (sp),hl
    push hl
    ld h,t_call
    ld l,a
    ld a,(OpsOnStack)
    inc a
    jp z,Error_Overflow
    ld (OpsOnStack),a
    ld a,l
    ex (sp),hl
    inc sp
    jp (hl) ;ret
    
pushParen: ;a is paren type (0 if any) 
	; constructed as [opsOnstack value][call]... == [t_word][OpsOnStack][parenType][t_call][addrl][addrh]...
	ex (sp),hl; push addr
    push hl
    ld h,t_call
    ld l,a			
    ld a,(Parens)
    inc a
    jp z,Error_Overflow
    ld (Parens),a
    ex (sp),hl ;Push call and parentype
    push hl
    
    ld l,t_word
    ld a,(OpsOnStack)
    ld h,a
    ex (sp),hl ;now push opsOnStack and t_word
    xor a
    ld (OpsOnStack),a ;clear ops on stack
    
    jp (hl) ;ret ;destroys only a and hl
    
;this call closes a paren
closeParen: ;a is paren type (or 0 if any), destroys all, rets z if no parens on stack
    ld d,a ;save a
    ld a,(Parens)
    or a
    ret z
    dec a
    
    ld (Parens),a
    pop hl ;get return address
    ld (_closeParenRetAddr+1),hl
    ;now we do close paren
    ;paren should be [t_word][OpsOnStack][parenType][t_call][addrl][addrh]...
    pop hl
    ld a,t_word
    cp l ;should be z
    jp nz,Unknown_opcode_error
    ;store ops on stack
    ld a,h
    ld (OpsOnStack),a
    pop hl
    
    ld a,t_call
    cp h
    jp nz,Unknown_opcode_error
    
    ld a,l
    or a
    jr z,_closeParenNoCheckParensEqual
    ld a,d
    or a
    jr z,_closeParenNoCheckParensEqual
    cp l
    jr z,_closeParenNoCheckParensEqual
Syntax_Error:
    ld a,8+128 ;error syntax
    bjump(_JError)
    
_closeParenNoCheckParensEqual:
    
    pop hl ;get call address
    ld bc,_closeParenRetNZ
	push bc ;set ret addr
	jp (hl)
_closeParenRetNZ:
	or 1
_closeParenRetAddr:
    jp Unknown_opcode_error
    
    
    
pushCmd: ;pushes command to stack and incs CmdsOnStack ;destroys hl,a
	ex (sp),hl
    push hl
    ld h,t_call
    ld l,a
    ld a,(CmdsOnStack)
    inc a
    jp z,Error_Overflow
    ld (CmdsOnStack),a
    ld a,l
    ex (sp),hl
    inc sp
    jp (hl) ;ret
    
    


    
Error_Invalid:
	ld a,15+128
    bjump(_JError)    
    
Error_IllegalNest:
	ld a,16+128
    bjump(_JError)


getNextTokDE: ;next token -> de, c - 2 byte
	ld hl,(basic_pc)	;16			;65 base
    inc hl				;6
    call getTokDE		;17 + __
    ld (basic_pc),hl	;16
    ret					;10
    
getTokDE: ;gets tok at hl -> de, affects hl, 
	;2 byte tokens: 5c-5e, 60-63, 7e, aa, bb, ef
    ;  Time Stats:
    ;  1 byte < 5c	:	 33
    ;  1 byte = 5f  :	 45
    ;  1 byte 64-7d	:	128
    ;  1 byte 7f-a9	:	128
    ;  1 byte ab-ba	:	116
    ;  1 byte bc-ee	:	 97
    ;  1 byte f0-ff	:	 78
    ;  2 byte 5c-63	:	 85
    ;  2 byte 7e	:	149
    ;  2 byte aa	:	137
    ;  2 byte bb	:	118
    ;  2 byte ef	:	 99
    ;if 1 byte, d is preserved, value in e and a, ret nc if one byte
    
    ld a,(hl)											;7
    ld e,a												;4
    cp $5c												;7
    ccf													;4
    ret nc ;ret nc if 1 byte							;11/5
    cp $5f												;7
    ret z ;rets c if two bytes							;11/5
	;5c-63
	cp $64												;7
    jr c,twoByteTok										;7/12
    
    cp $ef												;7
	jr z,twoByteTok										;7/12
    ret nc												;11/5
    
    cp $bb												;7
	jr z,twoByteTok										;7/12
    ret nc												;11/5
    
    cp $aa												;7
	jr z,twoByteTok										;7/12
    ret nc												;11/5
    
    and $81		;not 7e									;7
	ret nz												;11/5

twoByteTok:	;27
    inc hl												;6
	 ld d,(hl)											;7
     scf ;yes it does									;4
	ret													;10


callHL:
	jp (hl)


;does an operation on the stack if there is one
;this is a call, not a jump
doStackOp: ;returns z if there weren't
	ld a,(OpsOnStack)
	or a
    ret z
    ;otherwise, we do the operation 
    
    dec a
    ld (OpsOnStack),a
    pop hl ;get return address
    ld (_doStackOpRetAddr+1),hl
    ;now we do op
    ;op should be [type=t_call][addr][addr]
    dec sp
    pop af ;a should be type now
    cp t_call
    jp nz,Unknown_opcode_error
    
    pop hl
    ld bc,_doStackOpRetNZ
	push bc
	jp (hl)
_doStackOpRetNZ:
	or 1
_doStackOpRetAddr:
    jp Unknown_opcode_error
  


AnsBoolean: ;converts ans to boolean, returns A nz if true
	ld hl,(Ans)
	ld a,(AnsType)
    cp t_boolean
    jr nz,_AnsBoolean_not_boolean
	 ld a,h
     or a
     ret
_AnsBoolean_not_boolean:
	;now we actually have to convert. for most stuff, it's simply false if 0
    cp t_halffloat ;below this, false if 0
    jr nc,_AnsBoolean_not_belowHalfFloat
     ld a,h
     or l
     ret
_AnsBoolean_not_belowHalfFloat:
    jr nz,_AnsBoolean_not_halfFloat
     ;0 is Â±
     ld a,h
     and $7f
     or l
     ret
_AnsBoolean_not_halfFloat:
    ;now only if it's a byte or word
    cp t_word + 1
    jp nc,NotImplementedError
    cp t_word
    ld a,h
    jr nz,_AnsBoolean_not_word
     or l
_AnsBoolean_not_word:
	or a	
    ret
    

    
    
#include "ParserOperations.z80"
    
#include "parserVarRoutines.z80"
;--------------------------------------------------------------------------------------------------------------------------------










tok_Newline: ;does all operations on stack
	ld a,(OpsOnStack)
	or a
    jr z,_tok_Newline_chkCmds
    ;otherwise, we do the operation and dont store pc so this recurses
    dec a
    ld (OpsOnStack),a
    ;now we do op
    ;op should be [type=t_call][addr][addr]
    dec sp
    pop af ;a should be type now
    cp t_call
    jp nz,Unknown_opcode_error
    
    pop hl
    ld de,ParseEnd ;ret addr
	push de
	jp (hl)
_tok_Newline_chkCmds:
	ld a,(CmdsOnStack)
	or a
    jp z,pass
    ;otherwise, we do the command and dont store pc so this recurses
    dec a
    ld (CmdsOnStack),a
    ;now we do op
    ;op should be [type=t_call][addr][addr]
    dec sp
    pop af ;a should be type now
    cp t_call
    jp nz,Unknown_opcode_error
    
    pop hl
    ;no ret addr for commands
	jp (hl)
    


    
tok_End:	;pops and parses value popped in the context of control structures
	;things that end needs to do: jump back to loop control structures (Repeat,While,For)
    ;							  be ignored for if statements
    ;controlCode list: $ffff - terminate program
    ;			  	   $0000 - nop (for ifs)
    ;			  	   $0001---- = jpBasic *
    ;
    ;stack is written lh 
    
     ld (basic_pc),de
     pop hl
     ld a,h
     and l
     cp $ff
     jp z,exit
     ld a,h
     or l
     jp z,ParseEnd
     dec hl
     ld a,l
     or h
     jr nz,_tok_End_noJPbasic
      ;jpBasic *
      pop hl
      ld (basic_pc),hl
      jp ParseEnd
_tok_End_noJPbasic:
     
Unknown_opcode_error:
     ;raise unknown opcode error
     ld a,13+128 ;e_undefined
     bjump(_JError)
     
Tok_Repeat:
	;always does at least once
    ;repeats untill cond is true
	;cond is tested at start, however
    
    ;push a jpbasic
    dec de
    push de
    inc de
    ld hl,1
    push hl
    nop 
     nop
    ;push a command
    ld hl,Repeat_command
    call pushCmd
    	
	
    ;continue
    jp ParseEndStoPc
    
Repeat_command:
	; change the repeat's control code to a nop or jpbasic depending on condition
    ;this is called with stack clear and the repeat's control code right there
    ;check ans
    call AnsBoolean 
    ;nz if true
    jp z,ParseEnd ;if false, repeat
    ;change control code to nop
    pop hl
    pop hl
    ld hl,0
    push hl
    jp ParseEnd
    
    
    
    
    
    
    
    
Tok_While:
	;TODO: condition test
    ;currently acts as while 1
    ;ok, push basicPC-1 to stack
    dec de
    push de
    inc de
    ld hl,1
    push hl
    ;continue
    jp ParseEndStoPc
    
     
Tok_Sto:
	call doStackOp
    jp nz,ParseEnd
    call pushAns
    
    ld hl,StoRoutine
    call pushOp
    
    ld hl,(basic_pc)
	inc hl
    ld (basic_pc),hl
    jp ParseEnd
    
    

Tok_Plus: 
	call doStackOp
    jp nz,ParseEnd
    ;push answer
    call pushAns
    
    ;push operation
    
    ld hl,PlusRoutine
    call pushOp
    
    
    
    ld hl,(basic_pc)
	inc hl
    ld (basic_pc),hl
    jp ParseEnd
    
     
Tok_openParen:
	;pushes a paren of type 1
	ld a,1
    ld hl,openParen
    call pushParen
    jp ParseEndStoPC
    
openParen:
	;pass
    ret
    
    
    
Tok_closeParen:
	;first do all outstanding operations
    call doStackOp
    jp nz,ParseEnd
    
	;then pop a paren of type 1
    ld (basic_pc),de ;sto pc
    ld a,1
    call closeParen
    ;now we just continue
    jp ParseEnd
    
     

Tok_not: ;does boolean complement
    ;open paren type 1
    ld a,1
    ld hl,notRoutine
    call pushParen
    jp ParseEndStoPC
    
    
notRoutine:
    call AnsBoolean
    jr z,_Tok_not_retTrue
    ;was true, ret false
    ld h,0
    ld (Ans),hl
    ld a,t_boolean
    ld (AnsType),a
    ret
_Tok_not_retTrue:
    ld h,1
    ld (Ans),hl
    ld a,t_boolean
    ld (AnsType),a
    ret
    
    
    
    
    
    
    
Tok_ClrTable:
	ld (basic_pc),de
    call delGlobalVars
    jp ParseEnd
;----------------------------------------------     
     
     
     
     
     
    
ParseDecNumber: ;decimal number := digits 0-9
			 ;E is an operator and . is an operator for now
	;ok, each time we hit a number, mul value by 10 and add n
    
    ;start as 16 bit int
    
    ;de is basic_pc
    ;a is tok
    ld b,d
    ld c,e
    sub $30 ;get numeric value from digit
    ld h,0
    ld l,a
    
_ParseDecNumber_loop:
    inc bc
    ld a,(bc)
    ;check is number
    sub $30
    cp 10 ;a<10, c set
    jr nc,_ParseDecNumber_loopEnd
     ;mul hl by 10
     push hl ;in case of overflow
     add hl,hl	;x2
      jr c,ParseDecNumberBig
     ld d,h
     ld e,l
     add hl,hl	;x4
      jr c,ParseDecNumberBig
     add hl,hl	;x8
      jr c,ParseDecNumberBig
     add hl,de	;x10
      jr c,ParseDecNumberBig
     ;add a to hl
     ld d,0
     ld e,a
     add hl,de
      jr c,ParseDecNumberBig
     pop af ;discard push
    jp _ParseDecNumber_loop
_ParseDecNumber_loopEnd:
    dec bc
    ld (basic_pc),bc
    
    ld (Ans),hl
    ld a,t_uint
    ld (AnsType),a
    
    jp ParseEnd
    
    
ParseDecNumberBig:		;max size: ~614 digits (255 bytes)
	;uses bigints
    pop de ;get hl in de
    ;a is still digit
    ;make a bigint in appdata
    ld hl,appData
	ld (hl),2	;starts off size 2, this way appdata is cleared by this routine
    inc hl
    ld (hl),e
    inc hl
    ld (hl),d
    
    ;add the digit
    
_ParseDecNumberBig_digLoop:	
   push bc
    ;mul bigint by 10
    ld hl,appData
    ld b,(hl)
    ex de,hl
    ld hl,0
    ld c,a ;put new digit in carry
_ParseDecNumberBig_Mul10andAddLoop:
	inc de
    ;multiply the byte by 10
    ld a,(de)
    ld l,a
    add hl,hl
    push de
     ld d,h
     ld e,l
     add hl,hl
     add hl,hl
     add hl,de
    pop de
    ld a,b
    ld b,0
    add hl,bc ;add carry
    ld b,a
    ld c,h ;sto carry
    ld h,0
    ld a,l
    ld (de),a ;sto result
    
    djnz _ParseDecNumberBig_Mul10andAddLoop
    
    ;carry test
    ld a,c
    or a
    jr z,_ParseDecNumberBig_DontExpandInt
     ;check first if too long or not
     ld hl,appData
     inc (hl)
     jr z,_ParseDecNumberBig_ExpandInt_Overflow
     
     ;add the byte
     inc de
     ld (de),a
    
_ParseDecNumberBig_DontExpandInt:
    ;get the next digit
   pop bc
   inc bc
   ld a,(bc)
   sub $30
   cp 10
   jp c,_ParseDecNumberBig_digLoop
    
    ld hl,appData
    
    ld (Ans),hl
    ld a,t_Bigint+t_pointer ;pointer to a bigint
    ld (AnsType),a
    
    dec bc
    ld (basic_pc),bc
    jp ParseEnd

    
_ParseDecNumberBig_ExpandInt_Overflow:
	pop bc ; get pc back
    ld (basic_pc),bc
    
Error_Overflow:
	ld a,129 ; E_Overflow + goto
    bjump(_JError)
    
    
;-----------

;var stuff
ParseLocalVarName:
	;de is parse part
    ld hl,appData ;destination
    
    ld b,250 ;max var name
_ParseLocalVarName_Loop:
	inc de
    inc hl
	ld a,(de)
    ;is it a valid var name token?
    ;A-Theta,0-9
    
	;$41 to $5c inclusive and $30-$39 inclusive
    cp $30
    jr c,_ParseLocalVarName_Loop_end
    cp $39+1
    jr c,_ParseLocalVarName_Loop_validChar
	cp $41
    jr c,_ParseLocalVarName_Loop_end
    cp $5c+1
    jr nc,_ParseLocalVarName_Loop_end
_ParseLocalVarName_Loop_validChar:
	ld (hl),a
    djnz _ParseLocalVarName_Loop
    
    ld (basic_pc),de
    jp Error_Overflow
    
_ParseLocalVarName_Loop_end:
	; always exits due to nonVar Char
	xor a
    ld (hl),a
	inc hl
    ld (hl),a
	inc hl
    ld (hl),a
	;now hl-appdata = len
    
    dec de
    ld (basic_pc),de
    
    ld de,0 - appData
    
    add hl,de
	
    ld a,l
    ld (appData),a
    ;sto ans now
    ld hl,appData
    ld (Ans),hl
    ld a,t_pointer + t_Local_Variable
    ld (AnsType),a
    jp ParseEnd
    


    
;Temporary test stuff:
    
    

Tok_I: ;casts to int from byte
	ld a,t_uint
    ld (AnsType),a
    ld hl,(Ans)
    ld l,h
    ld h,0
    ld (Ans),hl
    jp ParseEndStoPc
Tok_P: ;reads port (ans) for now as a little test
	ld hl,(Ans)
    ld c,l
    in h,(c)
    ld (Ans),hl
    ld a,t_byte
    ld (AnsType),a
    jp ParseEndStoPc
Tok_S: ; sets port ansH to ansL for now as a little test
 	ld hl,(Ans)
    ld c,h
	out (c),l
    jp ParseEndStoPc
    
Tok_R: ;reads mem at ans for now as a little test
	ld hl,(Ans)
    ld h,(hl)
    ld (Ans),hl
    ld a,t_byte
    ld (AnsType),a
    jp ParseEndStoPc
    
    
    
Tok_L: ;pushes a local var table to the stack

	ld hl,makeLocalVATcall
    call pushCmd
    ;continue
    jp ParseEndStoPc
makeLocalVATcall:
	call makeLocalVAT
    jp ParseEnd
    
Tok_T: ;clears ans h
	ld a,0
	ld (Ans+1),a
	jp ParseEndStoPC





Tok_V: ;gets a variable's value into ans
	;find ans
    ld (basic_pc),de
    ld hl,(Ans)
    call findLocalVar
    	;RETURNS:
              ;if found: c,nz
              ; hl - ste
              ; de - data
              ; a - type
              ;if not found: nc,nz
              ; hl - top of symbol table (in stack)
              ;if there is no local layer: nc,z
    jp z,Error_Invalid
    ld (Ans),de
    ld (AnsType),a
    jp ParseEnd


    
TokVecTable:
;$00
.dw NotImplementedError	;unused
.dw NotImplementedError		;>DMS
.dw NotImplementedError		;>Dec
.dw NotImplementedError		;>Frac
.dw Tok_Sto					;->
.dw NotImplementedError		;Boxplot
.dw NotImplementedError		;[
.dw NotImplementedError		;]
;$08
.dw NotImplementedError		;{
.dw NotImplementedError		;}
.dw NotImplementedError		;^^r
.dw NotImplementedError		;Â°
.dw NotImplementedError		;^^1
.dw NotImplementedError		;^^2
.dw NotImplementedError		;^^T
.dw NotImplementedError		;^^3
;$10
.dw Tok_openParen			;(
.dw Tok_closeParen			;)
.dw NotImplementedError		;round(
.dw NotImplementedError		;pxl-Test(
.dw NotImplementedError		;augment(
.dw NotImplementedError		;rowSwap(
.dw NotImplementedError		;row+(
.dw NotImplementedError		;*row(
;$18
.dw NotImplementedError		;*row+(
.dw NotImplementedError		;max(
.dw NotImplementedError		;min(
.dw NotImplementedError		;R>Pr(
.dw NotImplementedError		;R>Ptheta(
.dw NotImplementedError		;P>Rx(
.dw NotImplementedError		;P>Ry(
.dw NotImplementedError		;median(

;$20
.dw NotImplementedError		;randM(
.dw NotImplementedError		;mean(
.dw NotImplementedError		;solve(
.dw NotImplementedError		;seq(
.dw NotImplementedError		;fnInt(
.dw NotImplementedError		;nDeriv(
.dw NotImplementedError	;unused
.dw NotImplementedError		;fMin(
;$28
.dw NotImplementedError		;fMax(
.dw NotImplementedError		;[space]
.dw NotImplementedError		;"
.dw NotImplementedError		;,
.dw NotImplementedError		;i (imag)
.dw NotImplementedError		;!
.dw NotImplementedError		;CubicReg
.dw NotImplementedError		;QuartReg
;$30
.dw ParseDecNumber			;0
.dw ParseDecNumber			;1
.dw ParseDecNumber			;2
.dw ParseDecNumber			;3
.dw ParseDecNumber			;4
.dw ParseDecNumber			;5
.dw ParseDecNumber			;6
.dw ParseDecNumber			;7
;$38
.dw ParseDecNumber			;8
.dw ParseDecNumber			;9
.dw NotImplementedError		;.
.dw NotImplementedError		;E (exp)
.dw NotImplementedError		; or 
.dw NotImplementedError		; xor 
.dw NotImplementedError		;:
.dw tok_Newline				;newline

;$40
.dw NotImplementedError		; and 
.dw NotImplementedError		;A
.dw NotImplementedError		;B
.dw NotImplementedError		;C
.dw NotImplementedError		;D
.dw NotImplementedError		;E
.dw NotImplementedError		;F
.dw NotImplementedError		;G
;$48
.dw NotImplementedError		;H
.dw Tok_I					;I
.dw NotImplementedError		;J
.dw NotImplementedError		;K
.dw Tok_L					;L
.dw NotImplementedError		;M
.dw NotImplementedError		;N
.dw NotImplementedError		;O
;$50
.dw Tok_P					;P
.dw NotImplementedError		;Q
.dw Tok_R					;R
.dw Tok_S					;S
.dw Tok_T					;T
.dw NotImplementedError		;U
.dw Tok_V					;V
.dw NotImplementedError		;W
;$58
.dw NotImplementedError		;X
.dw NotImplementedError		;Y
.dw NotImplementedError		;Z
.dw NotImplementedError		;Theta
.dw NotImplementedError	;2-byte 		Matrices
.dw NotImplementedError	;2-byte 		Lists
.dw NotImplementedError	;2-byte 		Equations
.dw NotImplementedError		;prgm

;$60
.dw NotImplementedError	;2-byte 		Picts
.dw NotImplementedError	;2-byte 		GDBs
.dw NotImplementedError	;2-byte 		Stat vars
.dw NotImplementedError	;2-byte			Window and Finance
.dw NotImplementedError		;Radian
.dw NotImplementedError		;Degree
.dw NotImplementedError		;Normal
.dw NotImplementedError		;Sci
;$68
.dw NotImplementedError		;Eng
.dw NotImplementedError		;Float
.dw NotImplementedError		;=
.dw NotImplementedError		;<
.dw NotImplementedError		;>
.dw NotImplementedError		;â¤
.dw NotImplementedError		;â¥
.dw NotImplementedError		;â 
;$70
.dw Tok_Plus				;+
.dw NotImplementedError		;- (sub)
.dw NotImplementedError		;Ans
.dw NotImplementedError		;Fix
.dw NotImplementedError		;Horiz
.dw NotImplementedError		;Full
.dw NotImplementedError		;Func
.dw NotImplementedError		;Param
;$78
.dw NotImplementedError		;Polar
.dw NotImplementedError		;Seq
.dw NotImplementedError		;IndpntAuto
.dw NotImplementedError		;IndpntAsk
.dw NotImplementedError		;DependAuto
.dw NotImplementedError		;DependAsk
.dw NotImplementedError	;2-byte			Graph format
.dw NotImplementedError		;[] plot mark

;$80
.dw NotImplementedError		;+ plot mark
.dw NotImplementedError		;. plot mark
.dw NotImplementedError		;*
.dw NotImplementedError		;/
.dw NotImplementedError		;Trace
.dw NotImplementedError		;ClrDraw
.dw NotImplementedError		;ZStandard
.dw NotImplementedError		;ZTrig
;$88
.dw NotImplementedError		;ZBox
.dw NotImplementedError		;Zoom In
.dw NotImplementedError		;Zoom Out
.dw NotImplementedError		;ZSquare
.dw NotImplementedError		;ZInteger
.dw NotImplementedError		;ZPrevious
.dw NotImplementedError		;ZDecimal
.dw NotImplementedError		;ZoomStat
;$90
.dw NotImplementedError		;ZoomRcl
.dw NotImplementedError		;PrintScreen
.dw NotImplementedError		;ZoomSto
.dw NotImplementedError		;Text(
.dw NotImplementedError		; nPr 
.dw NotImplementedError		; nCr 
.dw NotImplementedError		;FnOn
.dw NotImplementedError		;FnOff
;$98
.dw NotImplementedError		;StorePic
.dw NotImplementedError		;RecallPic
.dw NotImplementedError		;StoreGDB
.dw NotImplementedError		;RecallGDB
.dw NotImplementedError		;Line(
.dw NotImplementedError		;Vertical
.dw NotImplementedError		;Pt-On(
.dw NotImplementedError		;Pt-Off(

;$a0
.dw NotImplementedError		;Pt-Change(
.dw NotImplementedError		;Pxl-On(
.dw NotImplementedError		;Pxl-Off(
.dw NotImplementedError		;Pxl-Change(
.dw NotImplementedError		;Shade(
.dw NotImplementedError		;Circle(
.dw NotImplementedError		;Horizontal
.dw NotImplementedError		;Tangent(
;$a8
.dw NotImplementedError		;DrawInv
.dw NotImplementedError		;DrawF
.dw NotImplementedError	;2-byte 		Strings
.dw NotImplementedError		;rand
.dw NotImplementedError		;Ï
.dw NotImplementedError		;getKey
.dw NotImplementedError		;'
.dw NotImplementedError		;?
;$b0
.dw NotImplementedError		;- (neg)
.dw NotImplementedError		;int(
.dw NotImplementedError		;abs(
.dw NotImplementedError		;det(
.dw NotImplementedError		;identity(
.dw NotImplementedError		;dim(
.dw NotImplementedError		;sum(
.dw NotImplementedError		;prod(
;$b8
.dw Tok_not					;not(
.dw NotImplementedError		;iPart(
.dw NotImplementedError		;fPart(
.dw NotImplementedError	;2-byte			Misc
.dw NotImplementedError		;â(
.dw NotImplementedError		;3â(
.dw NotImplementedError		;ln(
.dw NotImplementedError		;e^(

;$c0
.dw NotImplementedError		;log(
.dw NotImplementedError		;10^(
.dw NotImplementedError		;sin(
.dw NotImplementedError		;sin-1(
.dw NotImplementedError		;cos(
.dw NotImplementedError		;cos-1(
.dw NotImplementedError		;tan(
.dw NotImplementedError		;tan-1(
;$c8
.dw NotImplementedError		;sinh(
.dw NotImplementedError		;sinh-1(
.dw NotImplementedError		;cosh(
.dw NotImplementedError		;cosh-1(
.dw NotImplementedError		;tanh(
.dw NotImplementedError		;tanh-1(
.dw NotImplementedError		;If 
.dw NotImplementedError		;Then
;$d0
.dw NotImplementedError		;Else
.dw Tok_While				;While 
.dw Tok_Repeat				;Repeat 
.dw NotImplementedError		;For(
.dw tok_End					;End
.dw NotImplementedError		;Return
.dw NotImplementedError		;Lbl
.dw NotImplementedError		;Goto
;$d8
.dw NotImplementedError		;Pause
.dw NotImplementedError		;Stop
.dw NotImplementedError		;IS>(
.dw NotImplementedError		;DS<(
.dw NotImplementedError		;Input 
.dw NotImplementedError		;Prompt 
.dw NotImplementedError		;Disp
.dw NotImplementedError		;DispGraph

;$e0
.dw NotImplementedError		;Output(
.dw NotImplementedError		;ClrHome
.dw NotImplementedError		;Fill(
.dw NotImplementedError		;SortA(
.dw NotImplementedError		;SortD(
.dw NotImplementedError		;DispTable
.dw NotImplementedError		;Menu(
.dw NotImplementedError		;Send(
;$e8
.dw NotImplementedError		;Get(
.dw NotImplementedError		;PlotsOn
.dw NotImplementedError		;PlotsOff
.dw ParseLocalVarName		;L (list)
.dw NotImplementedError		;Plot1(
.dw NotImplementedError		;Plot2(
.dw NotImplementedError		;Plot3(
.dw NotImplementedError	;TI-84+CE
;$f0
.dw NotImplementedError		;^
.dw NotImplementedError		;xâ
.dw NotImplementedError		;1-Var Stats
.dw NotImplementedError		;2-Var Stats
.dw NotImplementedError		;LinReg(a+bx)
.dw NotImplementedError		;ExpReg
.dw NotImplementedError		;LnReg
.dw NotImplementedError		;PwrReg
;$f8
.dw NotImplementedError		;Med-Med
.dw NotImplementedError		;QuadReg
.dw NotImplementedError		;ClrList
.dw Tok_ClrTable			;ClrTable
.dw NotImplementedError		;Histogram
.dw NotImplementedError		;xyLine
.dw NotImplementedError		;Scatter
.dw NotImplementedError		;LinReg(ax+b)
	